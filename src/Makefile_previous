# got this from https://gist.github.com/maxtruxa/4b3929e118914ccef057f8a05c614b0f


# output binary
BIN := voop.out

# source files
SRCS := main.cpp \
	Configuration.cpp \
	opengl_setup.cpp \
	Vertices.cpp \
	Image.cpp \
	Window.cpp \
	WindowCollection.cpp \
	Bubble.cpp \
	BubbleCluster.cpp \
	AllOpenBubbles.cpp \
	RenderThread.cpp \
	WorkerThread.cpp \
	GapBuffer.cpp

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR := .o
# intermediate directory for generated dependency files
DEPDIR := .d

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

OS := $(shell uname)
ifeq ($(OS),Darwin)
	CC := clang
	#was clang

	# C++ compiler
	CXX := clang++
	#was clang++

	# linker
	LD := clang++
else
	# C compiler
	CC := gcc 
	#was clang

	# C++ compiler
	CXX := g++
	#was clang++

	# linker
	LD := g++
	#was clang++
endif

# tar
TAR := tar


ifeq ($(OS),Darwin)
#LDLIBS := 
	export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
#	PKG_CONFIG_PATH := /usr/local/lib/pkgconfig/ 
else
endif

# C flags
CFLAGS := -std=c11

# C++ flags
ifeq ($(OS),Darwin)
#LDLIBS := 
#`pkg-config --cflags glfw3`  
CXXFLAGS := -std=c++11 -stdlib=libc++ \
	-isystem /usr/local/Cellar/glfw/3.2.1/include/ \
	-isystem /Users/oliver/github/skia/include/core/ \
	-isystem /Users/oliver/github/skia/include/config/ \
	-isystem /Users/oliver/github/skia/include/effects/ \
	-isystem /Users/oliver/github/skia/include/gpu/ \
	-isystem /Users/oliver/github/skia/include/ports/ \
	-isystem include/ 
	# using -isystem foo instead of -Ifoo suppresses warnings

# remobed fontconfig on mac...
LDLIBS := -L../../skia/out/Static  \
	`pkg-config --static --libs` \
	`pkg-config  --libs glfw3`
# also, glew (gl extension wrangler) is not needed on macs

#	CXXFLAGS := $(CXXFLAGS) 
# "tool -L" is like "ldd" for macs
LINKBITS :=  ../../lua-5.3.4/src/liblua.a \
	-L/usr/lib/ \
	/usr/local/opt/boost/lib/libboost_filesystem.a \
	/usr/local/opt/boost/lib/libboost_system.a \
	../../skia/out/Static/libskia.a \
	`pkg-config --static --libs glfw3 ` \
		-framework OpenGL 

#	-framework Cocoa -framework OpenGL -framework IOKit -framework CoreVideo
#	-framework OpenGL \

else 
# LINUX
CXXFLAGS := -std=c++11 `pkg-config --cflags glfw3` \
	-I/home/lucky/github/skia/include/core/ \
	-I/home/lucky/github/skia/include/config/ \
	-I/home/lucky/github/skia/include/effects/ \
	-I/home/lucky/github/skia/include/gpu/ \
	-I/home/lucky/github/skia/include/ports/ \
	-Iinclude/ 

# removed glew from static libs
LDLIBS := -L../../skia/out/Static  \
	`pkg-config --static --libs fontconfig` \
	`pkg-config  --libs glfw3`

# next bit should have flag -static , and link to libglfw.a
LINKBITS :=  ../../lua-5.3.4/src/liblua.a \
	/usr/lib/libboost_filesystem.a \
	../../glew-*/lib/libGLEW.a \
	/usr/lib/libboost_system.a -ldl -lGL
endif


# C/C++ flags
CPPFLAGS := -Wall -Wextra -pedantic -Wfatal-errors
# linker flags
LDFLAGS := -lpthread 
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td


#LDLIBS := -L../../skia/out/Static  `pkg-config --static --libs glfw3` -lskia 


# compile C source files
COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@
# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@

# link object files to binary
LINK.o = $(LD) $(LDFLAGS) -o $@ $(LDLIBS) 
# -framework OpenGL

# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: $(BIN)

dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR)

.PHONY: distclean
distclean: clean
	$(RM) $(BIN) $(DISTOUTPUT)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check:
	@echo no tests configured

.PHONY: help
help:
	@echo available targets: all dist clean distclean install uninstall check

IMGVIEWER := eog
ifeq ($(OS),Darwin)
	IMGVIEWER := open
endif

depgraph:
	m4 dependencies.m4 | dot -Tpng  -o dependency_graph.png ; convert dependency_graph.png -crop -0-1 dependency_graph.png ; $(IMGVIEWER) dependency_graph.png 
# convert dependency_graph.png -crop -0-1 dependency_graph.png
# ^ trims a row of transparent pixels from the bottom row which look ugly in linux's eog image viewer

$(BIN): $(OBJS)
	$(LINK.o) -Wall  $^ -lskia $(LINKBITS)

$(OBJDIR)/%.o: %.c
$(OBJDIR)/%.o: %.c $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.c) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cc
$(OBJDIR)/%.o: %.cc $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cxx
$(OBJDIR)/%.o: %.cxx $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS = $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)
